stages:          # List of stages for jobs, and their order of execution
  - prep
  - build
  - upload
  - tag
  - release

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/groktech/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_TITLE}"

prep:
  stage: prep
  image: alpine:latest
  script:
      - apk add jq
      - VERSION=$(jq -r .version src/specs.json)
      - PACKAGE_NAME="${CI_PROJECT_TITLE}-$VERSION.zip"
      - printf "PACKAGE_NAME=%s\nVERSION=%s\n" "$PACKAGE_NAME" "$VERSION" > prep.env
      - cat prep.env
  artifacts:
    reports:
      dotenv: prep.env

build:
  stage: build
  image: alpine:latest
  dependencies:
    - prep
  rules:
    - if: $CI_COMMIT_TAG
  script:
      - echo "version $VERSION"
      - echo "package $PACKAGE_NAME"
      - apk add zip
      - mkdir packages
      - cd "src"
      - zip ../packages/${PACKAGE_NAME} -r ./*
  artifacts:
    paths:
      - ./packages

upload:      
  stage: upload
  image: curlimages/curl:latest
  dependencies:
    - prep
    # - build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - >
      echo "version: $VERSION"
      echo "package: $PACKAGE_NAME"
      echo "uploading to: ${PACKAGE_REGISTRY_URL}/$VERSION/$PACKAGE_NAME"
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file packages/$PACKAGE_NAME "${PACKAGE_REGISTRY_URL}/$VERSION/$PACKAGE_NAME"
    - echo "Package successfully uploaded."

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - prep
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - > 
      RELEASE_VERSION="$VERSION"
      if [ "$RELEASE_VERSION" != "$CI_COMMIT_TAG" ]; then
        RELEASE_VERSION="$VERSION-$CI_COMMIT_TAG"
      fi
      if [ git tag -l "$CI_COMMIT_TAG" ]; then
        echo "Version $VERSION already exists"
      else
        release-cli create --name "$RELEASE_VERSION" --tag-name "$RELEASE_VERSION" --assets-link "{\"name\":\"$PACKAGE_NAME\",\"url\":\"${PACKAGE_REGISTRY_URL}/$RELEASE_VERSION/$PACKAGE_NAME\"}"
      fi
